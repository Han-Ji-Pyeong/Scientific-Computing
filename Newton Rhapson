import numpy as np

def f(x):
  return x**2 + 3*x - 4

def der_f(x):
  return 2*x + 3

def Newton_raphson(f0, f1, Xo, epsilon = 0.001, max_iteration = 20):
  for i in range(1, max_iteration):
    X1 = Xo - (f0(Xo) /f1(Xo))
    print(f"Iteration: {i}, X1 = {X1}, f(X1) = {f0(X1)}")
    if (np.abs(f0(X1)) < epsilon):
      return X1
    else:
      Xo = X1
  return None

rt = Newton_raphson(f, der_f, 100)
if(rt != None):
  print("Root of equation: ", rt)
else:
  print("Not found")
